PdfUploaderComponent
Template (pdf-uploader.component.html):
html
Copy code
<div class="pdf-uploader">
  <label class="custom-file-upload">
    <input type="file" (change)="onFileSelected($event)" />
    Upload PDF
  </label>
</div>
Component Class (pdf-uploader.component.ts):
typescript
Copy code
import { Component } from '@angular/core';
import { DocumentService } from '../document.service';

@Component({
  selector: 'app-pdf-uploader',
  templateUrl: './pdf-uploader.component.html',
  styleUrls: ['./pdf-uploader.component.css']
})
export class PdfUploaderComponent {

  constructor(private documentService: DocumentService) { }

  onFileSelected(event: any): void {
    const file: File = event.target.files[0];
    if (file) {
      this.documentService.uploadPdf(file).subscribe(response => {
        console.log(response);  // For debugging
        this.documentService.setDocumentData(response);
      });
    }
  }
}
Styles (pdf-uploader.component.css):
css
Copy code
.pdf-uploader {
  margin-top: 20px;
}

.custom-file-upload {
  display: inline-block;
  padding: 10px 20px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  border: 1px solid #007bff;
  text-align: center;
}

.custom-file-upload:hover {
  background-color: #0056b3;
}
DocTypeDisplayComponent
Template (doc-type-display.component.html):
html
Copy code
<div class="doc-type-display">
  <h3>Document Type: {{ docType }}</h3>
</div>
Component Class (doc-type-display.component.ts):
typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { DocumentService } from '../document.service';

@Component({
  selector: 'app-doc-type-display',
  templateUrl: './doc-type-display.component.html',
  styleUrls: ['./doc-type-display.component.css']
})
export class DocTypeDisplayComponent implements OnInit {
  docType: string;

  constructor(private documentService: DocumentService) { }

  ngOnInit(): void {
    this.documentService.getDocumentData().subscribe(data => {
      if (data) {
        this.docType = data.doc_type;
      }
    });
  }
}
Styles (doc-type-display.component.css):
css
Copy code
.doc-type-display {
  float: right;
  margin-top: 20px;
  margin-right: 20px;
}
ExtractedTextComponent
Template (extracted-text.component.html):
html
Copy code
<div class="extracted-text">
  <div *ngFor="let paragraph of paragraphs" class="paragraph">
    <p>{{ paragraph.text }}</p>
    <p><strong>Predicted Clause:</strong> {{ paragraph.clause }}</p>
  </div>
</div>
Component Class (extracted-text.component.ts):
typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { DocumentService } from '../document.service';

@Component({
  selector: 'app-extracted-text',
  templateUrl: './extracted-text.component.html',
  styleUrls: ['./extracted-text.component.css']
})
export class ExtractedTextComponent implements OnInit {
  paragraphs: any[] = [];

  constructor(private documentService: DocumentService) { }

  ngOnInit(): void {
    this.documentService.getDocumentData().subscribe(data => {
      if (data) {
        this.paragraphs = data.clauses;
      }
    });
  }
}
Styles (extracted-text.component.css):
css
Copy code
.extracted-text {
  clear: both;
  margin-top: 20px;
  padding-left: 20px;
}

.paragraph {
  margin-bottom: 20px;
}
Document Service
Service Class (document.service.ts):
typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DocumentService {
  private documentData = new BehaviorSubject<any>(null);

  constructor(private http: HttpClient) { }

  uploadPdf(file: File): Observable<any> {
    const formData = new FormData();
    formData.append('file', file);
    return this.http.post<any>('http://localhost:5000/upload-pdf', formData);
  }

  setDocumentData(data: any): void {
    this.documentData.next(data);
  }

  getDocumentData(): Observable<any> {
    return this.documentData.asObservable();
  }
}
2. App Component
Template (app.component.html):
html
Copy code
<div class="app">
  <div class="top-section">
    <app-pdf-uploader></app-pdf-uploader>
    <app-doc-type-display></app-doc-type-display>
  </div>
  <app-extracted-text></app-extracted-text>
</div>
Component Class (app.component.ts):
typescript
Copy code
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
}
Styles (app.component.css): No additional styles needed here.
3. AppModule
Module Class (app.module.ts):
typescript
Copy code
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { PdfUploaderComponent } from './pdf-uploader/pdf-uploader.component';
import { DocTypeDisplayComponent } from './doc-type-display/doc-type-display.component';
import { ExtractedTextComponent } from './extracted-text/extracted-text.component';
import { DocumentService } from './document.service';

@NgModule({
  declarations: [
    AppComponent,
    PdfUploaderComponent,
    DocTypeDisplayComponent,
    ExtractedTextComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule
  ],
  providers: [DocumentService],
  bootstrap: [AppComponent]
})
export class AppModule { }
