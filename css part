1. Backend Setup (app.py)
This file will serve as the main Flask application to handle PDF upload, text extraction, document type classification, and clause prediction.

python
Copy code
from flask import Flask, request, jsonify
from flask_cors import CORS
import pdfplumber
import os
import tempfile
import classify_model  # Import your document type classification model
import clause_model  # Import your clause prediction model

app = Flask(__name__)
CORS(app)

# Temporary directory to store uploaded files
UPLOAD_FOLDER = tempfile.gettempdir()
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Route for uploading a PDF file
@app.route('/upload-pdf', methods=['POST'])
def upload_pdf():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    if file:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)

        # Extract text from PDF
        extracted_text = classify_model.extract_text_from_pdf(file_path)

        # Classify document type
        document_type = classify_model.classify_document(file_path)

        # Predict clauses
        clauses = clause_model.predict_clauses(extracted_text)

        # Construct response
        response = {
            'text': extracted_text,
            'document_type': document_type,
            'clauses': clauses
        }
        return jsonify(response), 200

if __name__ == '__main__':
    app.run(debug=True)
2. ML Models Integration (classify_model.py and clause_model.py)
Ensure both classify_model.py and clause_model.py contain the respective model training and prediction functions, similar to the provided snippets. They should be able to load models and perform predictions based on the input PDF.

Frontend (Angular)
1. Service to Interact with Backend (document.service.ts)
Create a service in Angular to handle HTTP requests to the Flask backend.

typescript
Copy code
// document.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DocumentService {
  private baseUrl = 'http://localhost:5000';  // Update with your Flask server address

  constructor(private http: HttpClient) { }

  uploadPDF(file: File): Observable<any> {
    const formData: FormData = new FormData();
    formData.append('file', file, file.name);
    return this.http.post<any>(`${this.baseUrl}/upload-pdf`, formData);
  }
}
2. Component for Upload and Display (upload-pdf.component.ts)
Angular component to handle PDF upload, display extracted text, and implement clause prediction.

typescript
Copy code
// upload-pdf.component.ts

import { Component } from '@angular/core';
import { DocumentService } from './document.service';

@Component({
  selector: 'app-upload-pdf',
  templateUrl: './upload-pdf.component.html',
  styleUrls: ['./upload-pdf.component.css']
})
export class UploadPdfComponent {
  selectedFile: File | undefined;
  extractedText: string | undefined;
  documentType: string | undefined;
  clauses: any[] = [];

  constructor(private documentService: DocumentService) { }

  onFileSelected(event: any): void {
    this.selectedFile = event.target.files[0];
  }

  uploadPDF(): void {
    if (this.selectedFile) {
      this.documentService.uploadPDF(this.selectedFile).subscribe(
        response => {
          this.extractedText = response.text;
          this.documentType = response.document_type;
          this.clauses = response.clauses;
        },
        error => {
          console.error('Error uploading PDF:', error);
        }
      );
    }
  }

  predictParagraph(paragraph: string): void {
    // Implement this if needed for individual paragraph prediction
    console.log('Predicting for paragraph:', paragraph);
  }
}
3. HTML Template (upload-pdf.component.html)
Angular template to display PDF upload interface, extracted text, and predicted clauses.

html
Copy code
<!-- upload-pdf.component.html -->

<input type="file" (change)="onFileSelected($event)">
<button (click)="uploadPDF()">Upload PDF</button>

<div *ngIf="extractedText">
  <h3>Document Type: {{ documentType }}</h3>
  <div *ngFor="let paragraph of extractedText.split('\n\n')">
    <p (click)="predictParagraph(paragraph)">{{ paragraph }}</p>
    <div *ngIf="clauses.length > 0 && clauses[0].text === paragraph">
      <p><strong>Section:</strong> {{ clauses[0].section }}</p>
      <p><strong>Clause:</strong> {{ clauses[0].clause }}</p>
      <p><strong>Sub-section:</strong> {{ clauses[0].sub_section }}</p>
    </div>
  </div>
</div>
