import streamlit as st
import os
import PyPDF2
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
import joblib

# Function to extract text from PDF
def extract_text_from_pdf(pdf_file):
    text = ""
    with open(pdf_file, 'rb') as file:
        reader = PyPDF2.PdfFileReader(file)
        for page_num in range(reader.numPages):
            page = reader.getPage(page_num)
            text += page.extractText()
    return text

# Function to load data
def load_data(folder_path):
    data = []
    labels = []
    for label in os.listdir(folder_path):
        label_path = os.path.join(folder_path, label)
        if os.path.isdir(label_path):
            for file_name in os.listdir(label_path):
                file_path = os.path.join(label_path, file_name)
                if file_name.endswith('.pdf'):
                    text = extract_text_from_pdf(file_path)
                    data.append(text)
                    labels.append(label)
    return data, labels

# Function to train ML model
def train_model(data, labels):
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(data)
    model = SVC(kernel='linear')
    model.fit(X, labels)
    return model, vectorizer

# Function to predict document type
def predict_document_type(model, text, vectorizer):
    vectorized_text = vectorizer.transform([text])
    prediction = model.predict(vectorized_text)
    return prediction[0]

# Main function
def main():
    st.title('Document Type Classification')
    
    # Check if the model exists, if not, train the model
    if not os.path.exists('model.pkl') or not os.path.exists('vectorizer.pkl'):
        st.write('Training the model...')
        data, labels = load_data('data')  # Replace 'data' with your actual dataset folder path
        model, vectorizer = train_model(data, labels)
        joblib.dump(model, 'model.pkl')
        joblib.dump(vectorizer, 'vectorizer.pkl')
        st.write('Model trained and saved successfully!')
    
    # Load the trained model and vectorizer
    model = joblib.load('model.pkl')
    vectorizer = joblib.load('vectorizer.pkl')
    
    # File upload
    uploaded_file = st.file_uploader("Upload PDF file", type=["pdf"])
    
    if uploaded_file is not None:
        # Display uploaded file
        st.write('Uploaded PDF file:', uploaded_file.name)
        
        # Extract text from PDF
        text = extract_text_from_pdf(uploaded_file)
        
        # Predict document type
        document_type = predict_document_type(model, text, vectorizer)
        
        # Display layout
        st.write('## Document Classification Result')
        st.write('---')
        
        # Display uploaded PDF and extracted text side by side
        col1, col2 = st.columns(2)
        
        with col1:
            st.write('### Uploaded PDF:')
            st.write(uploaded_file.name)
        
        with col2:
            st.write('### Extracted Text:')
            st.write(text)
        
        # Display document type below the uploaded PDF and extracted text
        st.write('---')
        st.write('### Document Type:')
        st.write(document_type)

if __name__ == '__main__':
    main()
