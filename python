import sys

# Get input clause from the user
print("Enter the clause text to compare (press Enter on an empty line to finish input):")
input_lines = []
while True:
    line = sys.stdin.readline().strip()  # Read a line of input
    if not line:  # Check if the line is empty (indicating end of input)
        break
    input_lines.append(line)

# Combine the input lines into a single string
input_clause = ' '.join(input_lines)

# Preprocess the input clause text
input_clause_preprocessed = preprocess_text(input_clause)

# Vectorize the input clause
input_clause_vectorized = vectorizer.transform([input_clause_preprocessed])

# Calculate similarity for clauses within the same section
similarities = {}
for section_name in df['label'].apply(lambda x: x[0]).unique():
    section_indices = df[df['label'].apply(lambda x: x[0]) == section_name].index
    section_X = X[section_indices]
    section_similarities = cosine_similarity(input_clause_vectorized, section_X)
    max_similarity = section_similarities.max()
    max_similarity_index = section_indices[section_similarities.argmax()]
    similarities[section_name] = (max_similarity, max_similarity_index)

# Find the most similar clause within each section
most_similar_section = max(similarities, key=lambda x: similarities[x][0])
most_similar_clause_index = similarities[most_similar_section][1]
most_similar_clause = df.loc[most_similar_clause_index]

# Output
print(most_similar_section, most_similar_clause['label'][1])  # Displaying section name followed by clause name
