import os
import re
import string
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load and preprocess the dataset
documents = []
base_dir = 'dataset/'

for section_folder in os.listdir(base_dir):
    section_path = os.path.join(base_dir, section_folder)
    if os.path.isdir(section_path):
        for clause_file in os.listdir(section_path):
            clause_path = os.path.join(section_path, clause_file)
            if os.path.isfile(clause_path):
                with open(clause_path, 'r', encoding='utf-8') as file:
                    clause_text = file.read().strip()
                    # Extract the section name from the folder name
                    section_name = section_folder
                    clause_name = os.path.splitext(clause_file)[0]  # Remove file extension
                    documents.append({"text": clause_text, "label": (section_name, clause_name)})

# Convert to DataFrame
df = pd.DataFrame(documents)

# Preprocess the text
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'\d+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = text.strip()
    return text

# Apply preprocessing
df['text'] = df['text'].apply(preprocess_text)

# Vectorize the dataset
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['text'])

# Vectorize the input clause
input_clause = "Input clause text to compare"
input_clause_preprocessed = preprocess_text(input_clause)
input_clause_vectorized = vectorizer.transform([input_clause_preprocessed])

# Calculate similarity for clauses within the same section
similarities = {}
for section_name in df['label'].apply(lambda x: x[0]).unique():
    section_indices = df[df['label'].apply(lambda x: x[0]) == section_name].index
    section_X = X[section_indices]
    section_similarities = cosine_similarity(input_clause_vectorized, section_X)
    max_similarity = section_similarities.max()
    max_similarity_index = section_indices[section_similarities.argmax()]
    similarities[section_name] = (max_similarity, max_similarity_index)

# Find the most similar clause within each section
most_similar_section = max(similarities, key=lambda x: similarities[x][0])
most_similar_clause_index = similarities[most_similar_section][1]
most_similar_clause = df.loc[most_similar_clause_index]

# Output
print("Most similar clause within section", most_similar_section)
print("Clause Name:", most_similar_clause['label'][1])  # Displaying section name followed by clause name
